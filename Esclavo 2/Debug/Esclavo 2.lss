
Esclavo 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091f  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047a  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000156  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Config_SLAVE>:


uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  96:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  98:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  9a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a4:	08 95       	ret

000000a6 <setup>:

void setup(void);
void setup(void){

	
	I2C_Config_SLAVE(0x02);   //Iniciar el I2C como esclavo, enviarle su dirección
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Config_SLAVE>
	initUART9600();  //Iniciar UART
  ac:	0e 94 c2 00 	call	0x184	; 0x184 <initUART9600>
	
	sei(); //Activar interrupciones
  b0:	78 94       	sei
  b2:	08 95       	ret

000000b4 <main>:



int main(void)
{
     setup();
  b4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x4>

000000ba <__vector_24>:
    {
    }
	
}

ISR(TWI_vect){           //Vector de interrupción de I2C
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
  cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d0:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
  d2:	80 39       	cpi	r24, 0x90	; 144
  d4:	c9 f0       	breq	.+50     	; 0x108 <__vector_24+0x4e>
  d6:	38 f4       	brcc	.+14     	; 0xe6 <__vector_24+0x2c>
  d8:	80 37       	cpi	r24, 0x70	; 112
  da:	81 f0       	breq	.+32     	; 0xfc <__vector_24+0x42>
  dc:	80 38       	cpi	r24, 0x80	; 128
  de:	a1 f0       	breq	.+40     	; 0x108 <__vector_24+0x4e>
  e0:	80 36       	cpi	r24, 0x60	; 96
  e2:	71 f5       	brne	.+92     	; 0x140 <__vector_24+0x86>
  e4:	0b c0       	rjmp	.+22     	; 0xfc <__vector_24+0x42>
  e6:	88 3b       	cpi	r24, 0xB8	; 184
  e8:	e1 f0       	breq	.+56     	; 0x122 <__vector_24+0x68>
  ea:	18 f4       	brcc	.+6      	; 0xf2 <__vector_24+0x38>
  ec:	88 3a       	cpi	r24, 0xA8	; 168
  ee:	c9 f0       	breq	.+50     	; 0x122 <__vector_24+0x68>
  f0:	27 c0       	rjmp	.+78     	; 0x140 <__vector_24+0x86>
  f2:	80 3c       	cpi	r24, 0xC0	; 192
  f4:	f9 f0       	breq	.+62     	; 0x134 <__vector_24+0x7a>
  f6:	88 3c       	cpi	r24, 0xC8	; 200
  f8:	e9 f0       	breq	.+58     	; 0x134 <__vector_24+0x7a>
  fa:	22 c0       	rjmp	.+68     	; 0x140 <__vector_24+0x86>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
		TWCR |= (1 << TWINT); //
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
		break;
 106:	21 c0       	rjmp	.+66     	; 0x14a <__vector_24+0x90>
		
		case 0x80:
		case 0x90:
		dato1 = TWDR;  //Recibió el dato, llamada general
 108:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <dato1+0x1>
 112:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <dato1>
		TWCR |= 1 << TWINT; //Borra la bandera TWINT
 116:	ec eb       	ldi	r30, 0xBC	; 188
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	80 83       	st	Z, r24
		break;
 120:	14 c0       	rjmp	.+40     	; 0x14a <__vector_24+0x90>
		
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = dato2; // Cargar el dato en el registro de datos*****************
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dato2>
 126:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la próxima operación
 12a:	ec eb       	ldi	r30, 0xBC	; 188
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	85 6c       	ori	r24, 0xC5	; 197
 132:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la próxima operación
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	84 6c       	ori	r24, 0xC4	; 196
 13c:	80 83       	st	Z, r24
		break;
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_24+0x90>
		
		default:    //Libera el BUS de cualquier error
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 69       	ori	r24, 0x90	; 144
 148:	80 83       	st	Z, r24
		
	}
	
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_18>:



ISR(USART_RX_vect)   //Vector de interrupción de UART
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 168:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 170:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 174:	85 ff       	sbrs	r24, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <__vector_18+0x14>
	
}
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 190:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 194:	e1 ec       	ldi	r30, 0xC1	; 193
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 19a:	80 81       	ld	r24, Z
 19c:	88 69       	ori	r24, 0x98	; 152
 19e:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 1a0:	e2 ec       	ldi	r30, 0xC2	; 194
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1a6:	80 81       	ld	r24, Z
 1a8:	86 60       	ori	r24, 0x06	; 6
 1aa:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 1ac:	87 e6       	ldi	r24, 0x67	; 103
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
