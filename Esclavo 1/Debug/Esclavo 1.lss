
Esclavo 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000008aa  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  0000094a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001251  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd9  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  0000343c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  0000362c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000042bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_SLAVE>:


uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  ac:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  ae:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  b0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  b4:	85 e4       	ldi	r24, 0x45	; 69
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	08 95       	ret

000000bc <setup>:

uint16_t distance = 0;
 
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  bc:	f8 94       	cli
	
	DDRB |= (1 << PORTB2) | (1 << PORTB1) | (1 << PORTB3) | (1 << PORTB4) | ~(1 << PORTB0); //PB1, PB2, PB3 como salida de servos 1,2,3, PB4 como salida de banda transportadora, PB0 entrada sensor de gas
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8e 6f       	ori	r24, 0xFE	; 254
  c2:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD3) |~(1 << DDD2);   //PD3 como salida de servo 4, PD2  como entrada sensor infrarrojo
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8b 6f       	ori	r24, 0xFB	; 251
  c8:	8a b9       	out	0x0a, r24	; 10
	//channelA, conectado a elevar y bajar garra
	//channelB, conetado a elevar y bajar brazo completo
	//channel2A, conectado a la garra
	//channel2B, conectado a rotar a garra
	
	initFastPWM1(8);  //Iniciar funcion de FASTPWM en timer1
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 ae 02 	call	0x55c	; 0x55c <initFastPWM1>
	channel(channelB, modo);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 8d 02 	call	0x51a	; 0x51a <channel>
	channel(channelA, modo);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 8d 02 	call	0x51a	; 0x51a <channel>
	topValue(29999);   //Valor alto de desbordamiento para 1 a 2 ms que se necesita de servo
  e2:	8f e2       	ldi	r24, 0x2F	; 47
  e4:	95 e7       	ldi	r25, 0x75	; 117
  e6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <topValue>

	initFastPWM2();  //Iniciar funcion de FASTPWM en timer2
  ea:	0e 94 15 03 	call	0x62a	; 0x62a <initFastPWM2>
	
	I2C_Config_SLAVE(0x03);   //Iniciar el I2C como esclavo, enviarle su dirección
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_SLAVE>
	initUART9600();  //Iniciar UART
  f4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <initUART9600>
	initUltrasonic(); //Iniciar sensor Ultrasónico
  f8:	0e 94 ab 03 	call	0x756	; 0x756 <initUltrasonic>
	
	PORTB |= ~(1 << PORTB4); 
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 6e       	ori	r24, 0xEF	; 239
 100:	85 b9       	out	0x05, r24	; 5
	
	
	PCMSK0 |= (1 << 0) | (1 << 5) ; //PCINT0
 102:	eb e6       	ldi	r30, 0x6B	; 107
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	81 62       	ori	r24, 0x21	; 33
 10a:	80 83       	st	Z, r24
	PCICR |= (1 << 0); //Mascara de interrupción
 10c:	e8 e6       	ldi	r30, 0x68	; 104
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24

	sei();   //Activar interrupciones
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <main>:



int main(void)
{
	setup();
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <setup>
	while(1)
	{
		
		
		
		if (dato_a_recibirI2C != 0)  //Cuando se recibe algo por I2C
 11e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 122:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	09 f4       	brne	.+2      	; 0x12c <main+0x12>
 12a:	34 c1       	rjmp	.+616    	; 0x394 <main+0x27a>
		{
			if (dato_a_recibirI2C == 1)        //Verificar el número de servo y aumentar o disminuir su ángulo
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 05       	cpc	r25, r1
 130:	99 f4       	brne	.+38     	; 0x158 <main+0x3e>
			{
				codo = codo + 5;
 132:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <codo>
 136:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <codo+0x1>
 13a:	2b 5f       	subi	r18, 0xFB	; 251
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <codo+0x1>
 142:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <codo>
				if (codo >= 254)
 146:	2e 3f       	cpi	r18, 0xFE	; 254
 148:	31 05       	cpc	r19, r1
 14a:	34 f0       	brlt	.+12     	; 0x158 <main+0x3e>
				{
					codo = 255;
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <codo+0x1>
 154:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <codo>
				}
			
			}
			
			if (dato_a_recibirI2C == 2)
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	89 f4       	brne	.+34     	; 0x180 <main+0x66>
			{
			
				codo = codo - 5;
 15e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <codo>
 162:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <codo+0x1>
 166:	25 50       	subi	r18, 0x05	; 5
 168:	31 09       	sbc	r19, r1
 16a:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <codo+0x1>
 16e:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <codo>
				if (codo <= 1)
 172:	22 30       	cpi	r18, 0x02	; 2
 174:	31 05       	cpc	r19, r1
 176:	24 f4       	brge	.+8      	; 0x180 <main+0x66>
				{
					codo = 0;
 178:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <codo+0x1>
 17c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <codo>
				}
				
			}
			
			if (dato_a_recibirI2C == 4)
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	91 05       	cpc	r25, r1
 184:	99 f4       	brne	.+38     	; 0x1ac <main+0x92>
			{
				brazo = brazo + 5;
 186:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <brazo>
 18a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <brazo+0x1>
 18e:	2b 5f       	subi	r18, 0xFB	; 251
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <brazo+0x1>
 196:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <brazo>
				if (brazo >= 254)
 19a:	2e 3f       	cpi	r18, 0xFE	; 254
 19c:	31 05       	cpc	r19, r1
 19e:	34 f0       	brlt	.+12     	; 0x1ac <main+0x92>
				{
					brazo = 255;
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <brazo+0x1>
 1a8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <brazo>
				}
				
			}
			
			if (dato_a_recibirI2C == 3)
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	91 05       	cpc	r25, r1
 1b0:	89 f4       	brne	.+34     	; 0x1d4 <main+0xba>
			{
				
				brazo = brazo - 5;
 1b2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <brazo>
 1b6:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <brazo+0x1>
 1ba:	25 50       	subi	r18, 0x05	; 5
 1bc:	31 09       	sbc	r19, r1
 1be:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <brazo+0x1>
 1c2:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <brazo>
				if (brazo <= 1)
 1c6:	22 30       	cpi	r18, 0x02	; 2
 1c8:	31 05       	cpc	r19, r1
 1ca:	24 f4       	brge	.+8      	; 0x1d4 <main+0xba>
				{
					brazo = 0;
 1cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <brazo+0x1>
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <brazo>
				}
				
				
			}
				
			if (dato_a_recibirI2C == 6)
 1d4:	86 30       	cpi	r24, 0x06	; 6
 1d6:	91 05       	cpc	r25, r1
 1d8:	99 f4       	brne	.+38     	; 0x200 <main+0xe6>
			{
				rota = rota + 2;
 1da:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <rota>
 1de:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <rota+0x1>
 1e2:	2e 5f       	subi	r18, 0xFE	; 254
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <rota+0x1>
 1ea:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <rota>
				if (rota >= 254)
 1ee:	2e 3f       	cpi	r18, 0xFE	; 254
 1f0:	31 05       	cpc	r19, r1
 1f2:	34 f0       	brlt	.+12     	; 0x200 <main+0xe6>
				{
					rota = 255;
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <rota+0x1>
 1fc:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <rota>
				}
				
			}
			
			if (dato_a_recibirI2C == 5)
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	91 05       	cpc	r25, r1
 204:	89 f4       	brne	.+34     	; 0x228 <main+0x10e>
			{
				
				rota = rota - 2;
 206:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <rota>
 20a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <rota+0x1>
 20e:	22 50       	subi	r18, 0x02	; 2
 210:	31 09       	sbc	r19, r1
 212:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <rota+0x1>
 216:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <rota>
				if (rota <= 1)
 21a:	22 30       	cpi	r18, 0x02	; 2
 21c:	31 05       	cpc	r19, r1
 21e:	24 f4       	brge	.+8      	; 0x228 <main+0x10e>
				{
					rota = 0;
 220:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rota+0x1>
 224:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rota>
				}
				
			}
			
			if (dato_a_recibirI2C == 7)
 228:	87 30       	cpi	r24, 0x07	; 7
 22a:	91 05       	cpc	r25, r1
 22c:	99 f4       	brne	.+38     	; 0x254 <main+0x13a>
			{
				garra = garra + 7;
 22e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <garra>
 232:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <garra+0x1>
 236:	29 5f       	subi	r18, 0xF9	; 249
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <garra+0x1>
 23e:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <garra>
				if (garra >= 254)
 242:	2e 3f       	cpi	r18, 0xFE	; 254
 244:	31 05       	cpc	r19, r1
 246:	34 f0       	brlt	.+12     	; 0x254 <main+0x13a>
				{
					garra = 255;
 248:	2f ef       	ldi	r18, 0xFF	; 255
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <garra+0x1>
 250:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <garra>
				}
				
			}
			
			if (dato_a_recibirI2C == 8)
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	91 05       	cpc	r25, r1
 258:	89 f4       	brne	.+34     	; 0x27c <main+0x162>
			{
				
				garra = garra - 7;
 25a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <garra>
 25e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <garra+0x1>
 262:	27 50       	subi	r18, 0x07	; 7
 264:	31 09       	sbc	r19, r1
 266:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <garra+0x1>
 26a:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <garra>
				if (garra <= 1)
 26e:	22 30       	cpi	r18, 0x02	; 2
 270:	31 05       	cpc	r19, r1
 272:	24 f4       	brge	.+8      	; 0x27c <main+0x162>
				{
					garra = 0;
 274:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <garra+0x1>
 278:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <garra>
				}
			
			}
			
			if (dato_a_recibirI2C == 10)
 27c:	8a 30       	cpi	r24, 0x0A	; 10
 27e:	91 05       	cpc	r25, r1
 280:	19 f4       	brne	.+6      	; 0x288 <main+0x16e>
			{
				
				sistema_activado = 1;
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			
			if (dato_a_recibirI2C == 11)
 288:	8b 30       	cpi	r24, 0x0B	; 11
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <main+0x178>
			{
				sistema_activado = 0;
 28e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				
			}
			
			if (dato_a_recibirI2C == 12)
 292:	0c 97       	sbiw	r24, 0x0c	; 12
 294:	39 f4       	brne	.+14     	; 0x2a4 <main+0x18a>
			{
				if (sistema_activado==1)
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	19 f4       	brne	.+6      	; 0x2a4 <main+0x18a>
				{
					PORTB |= (1 << PORTB4); 
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	80 61       	ori	r24, 0x10	; 16
 2a2:	85 b9       	out	0x05, r24	; 5
				}
			}
			
			if (dato_a_recibirI2C == 13)  //Cuando la caja llegue al final de la banda
 2a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <dato_a_recibirI2C>
 2a8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <dato_a_recibirI2C+0x1>
 2ac:	0d 97       	sbiw	r24, 0x0d	; 13
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x198>
 2b0:	6d c0       	rjmp	.+218    	; 0x38c <main+0x272>
			{
				if (sistema_activado==1)
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x1a2>
 2ba:	68 c0       	rjmp	.+208    	; 0x38c <main+0x272>
				{
					 PORTB &= ~(1 << PORTB4);  // Apaga PB4
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	85 b9       	out	0x05, r24	; 5
				
				
				if (cajas==2)
 2c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cajas>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	09 f0       	breq	.+2      	; 0x2cc <main+0x1b2>
 2ca:	60 c0       	rjmp	.+192    	; 0x38c <main+0x272>
 2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <main+0x1d8>
				{
					for (brazo = brazo; brazo>=0; brazo--)
					{
						convertServo(brazo, channelB);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <convertServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	8f e5       	ldi	r24, 0x5F	; 95
 2d6:	9a ee       	ldi	r25, 0xEA	; 234
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x1be>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x1c4>
 2de:	00 00       	nop
					 PORTB &= ~(1 << PORTB4);  // Apaga PB4
				
				
				if (cajas==2)
				{
					for (brazo = brazo; brazo>=0; brazo--)
 2e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <brazo>
 2e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <brazo+0x1>
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <brazo+0x1>
 2ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <brazo>
 2f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <brazo>
 2f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <brazo+0x1>
 2fa:	99 23       	and	r25, r25
 2fc:	44 f7       	brge	.-48     	; 0x2ce <main+0x1b4>
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	29 ef       	ldi	r18, 0xF9	; 249
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	91 50       	subi	r25, 0x01	; 1
 306:	20 40       	sbci	r18, 0x00	; 0
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x1ea>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x1f4>
 30e:	00 00       	nop
						_delay_ms(15);
						
					}
					
					_delay_ms(20);
					for (garra = garra; garra<=255; garra++)
 310:	12 c0       	rjmp	.+36     	; 0x336 <main+0x21c>
					{
						convertServo2(garra, channel2A); 
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	0e 94 2f 03 	call	0x65e	; 0x65e <convertServo2>
 318:	8f e5       	ldi	r24, 0x5F	; 95
 31a:	9a ee       	ldi	r25, 0xEA	; 234
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0x202>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x208>
 322:	00 00       	nop
						_delay_ms(15);
						
					}
					
					_delay_ms(20);
					for (garra = garra; garra<=255; garra++)
 324:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <garra>
 328:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <garra+0x1>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <garra+0x1>
 332:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <garra>
 336:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <garra>
 33a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <garra+0x1>
 33e:	8f 3f       	cpi	r24, 0xFF	; 255
 340:	91 05       	cpc	r25, r1
 342:	39 f3       	breq	.-50     	; 0x312 <main+0x1f8>
 344:	34 f3       	brlt	.-52     	; 0x312 <main+0x1f8>
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	29 ef       	ldi	r18, 0xF9	; 249
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x232>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x23c>
 356:	00 00       	nop
						_delay_ms(15);
						
					}
					_delay_ms(20);

					for (codo = codo; codo<=250; codo++)
 358:	12 c0       	rjmp	.+36     	; 0x37e <main+0x264>
					{
						convertServo(codo,channelA);
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <convertServo>
 360:	8f e5       	ldi	r24, 0x5F	; 95
 362:	9a ee       	ldi	r25, 0xEA	; 234
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x24a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x250>
 36a:	00 00       	nop
						_delay_ms(15);
						
					}
					_delay_ms(20);

					for (codo = codo; codo<=250; codo++)
 36c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <codo>
 370:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <codo+0x1>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <codo+0x1>
 37a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <codo>
 37e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <codo>
 382:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <codo+0x1>
 386:	8b 3f       	cpi	r24, 0xFB	; 251
 388:	91 05       	cpc	r25, r1
 38a:	3c f3       	brlt	.-50     	; 0x35a <main+0x240>
				}
			}
			
			
			
			dato_a_recibirI2C = 0;    //Evitar sumas indebidas
 38c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dato_a_recibirI2C+0x1>
 390:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <dato_a_recibirI2C>
		}
		
		
		if (sistema_activado == 1)   //Si el sistema se activo con el RTC
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	c1 f4       	brne	.+48     	; 0x3cc <main+0x2b2>
		{
			 distance = measureDistance();
 39c:	0e 94 b2 03 	call	0x764	; 0x764 <measureDistance>
 3a0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 3a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			 UART_PrintNum(distance);
 3a8:	0e 94 90 03 	call	0x720	; 0x720 <UART_PrintNum>
			 
			 if (distance <= 3)
 3ac:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 3b0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	91 05       	cpc	r25, r1
 3b8:	18 f4       	brcc	.+6      	; 0x3c0 <main+0x2a6>
			 {
				 cajas = 1; //Se reconoció caja grande
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <cajas>
			 }
			 
			 if (distance <= 6 && distance >=4)
 3c0:	04 97       	sbiw	r24, 0x04	; 4
 3c2:	03 97       	sbiw	r24, 0x03	; 3
 3c4:	18 f4       	brcc	.+6      	; 0x3cc <main+0x2b2>
			 {
				 cajas = 2; //Se reconoció caja pequeña
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cajas>
	
		}
		
		
		
		convertServo2(garra, channel2A);       //Enviar cada dato a los timers para controlar los servos
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <garra>
 3d2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <garra+0x1>
 3d6:	0e 94 2f 03 	call	0x65e	; 0x65e <convertServo2>
		convertServo(brazo, channelB);
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <brazo>
 3e0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <brazo+0x1>
 3e4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <convertServo>
		convertServo(codo,channelA);
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <codo>
 3ee:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <codo+0x1>
 3f2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <convertServo>
		convertServo2(rota, channel2B);
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rota>
 3fc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <rota+0x1>
 400:	0e 94 2f 03 	call	0x65e	; 0x65e <convertServo2>
 404:	8f e5       	ldi	r24, 0x5F	; 95
 406:	9a ee       	ldi	r25, 0xEA	; 234
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	86 ce       	rjmp	.-756    	; 0x11e <main+0x4>

00000412 <__vector_24>:
		
		
	}
}

ISR(TWI_vect){           //Vector de interrupción de I2C
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 424:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 428:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 42a:	80 39       	cpi	r24, 0x90	; 144
 42c:	c9 f0       	breq	.+50     	; 0x460 <__vector_24+0x4e>
 42e:	38 f4       	brcc	.+14     	; 0x43e <__vector_24+0x2c>
 430:	80 37       	cpi	r24, 0x70	; 112
 432:	81 f0       	breq	.+32     	; 0x454 <__vector_24+0x42>
 434:	80 38       	cpi	r24, 0x80	; 128
 436:	a1 f0       	breq	.+40     	; 0x460 <__vector_24+0x4e>
 438:	80 36       	cpi	r24, 0x60	; 96
 43a:	71 f5       	brne	.+92     	; 0x498 <__vector_24+0x86>
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__vector_24+0x42>
 43e:	88 3b       	cpi	r24, 0xB8	; 184
 440:	e1 f0       	breq	.+56     	; 0x47a <__vector_24+0x68>
 442:	18 f4       	brcc	.+6      	; 0x44a <__vector_24+0x38>
 444:	88 3a       	cpi	r24, 0xA8	; 168
 446:	c9 f0       	breq	.+50     	; 0x47a <__vector_24+0x68>
 448:	27 c0       	rjmp	.+78     	; 0x498 <__vector_24+0x86>
 44a:	80 3c       	cpi	r24, 0xC0	; 192
 44c:	f9 f0       	breq	.+62     	; 0x48c <__vector_24+0x7a>
 44e:	88 3c       	cpi	r24, 0xC8	; 200
 450:	e9 f0       	breq	.+58     	; 0x48c <__vector_24+0x7a>
 452:	22 c0       	rjmp	.+68     	; 0x498 <__vector_24+0x86>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
		TWCR |= (1 << TWINT); //
 454:	ec eb       	ldi	r30, 0xBC	; 188
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	80 68       	ori	r24, 0x80	; 128
 45c:	80 83       	st	Z, r24
		break;
 45e:	21 c0       	rjmp	.+66     	; 0x4a2 <__vector_24+0x90>
		
		case 0x80:
		case 0x90:
		dato_a_recibirI2C = TWDR;  //Recibió el dato, llamada general
 460:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <dato_a_recibirI2C+0x1>
 46a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <dato_a_recibirI2C>
		TWCR |= 1 << TWINT; //Borra la bandera TWINT
 46e:	ec eb       	ldi	r30, 0xBC	; 188
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	80 68       	ori	r24, 0x80	; 128
 476:	80 83       	st	Z, r24
		break;
 478:	14 c0       	rjmp	.+40     	; 0x4a2 <__vector_24+0x90>
		
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = dato_a_enviarI2C; // Cargar el dato en el registro de datos*****************
 47a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <dato_a_enviarI2C>
 47e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la próxima operación
 482:	ec eb       	ldi	r30, 0xBC	; 188
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	85 6c       	ori	r24, 0xC5	; 197
 48a:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la próxima operación
 48c:	ec eb       	ldi	r30, 0xBC	; 188
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	84 6c       	ori	r24, 0xC4	; 196
 494:	80 83       	st	Z, r24
		break;
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__vector_24+0x90>
		
		default:    //Libera el BUS de cualquier errror
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 498:	ec eb       	ldi	r30, 0xBC	; 188
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	80 69       	ori	r24, 0x90	; 144
 4a0:	80 83       	st	Z, r24
		
	}
	
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_3>:




ISR(PCINT0_vect){
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
	
	if(((PINB) & (1<<PINB0)) == 0){   //Condicional que compara si se detecto gas
 4c4:	18 99       	sbic	0x03, 0	; 3
 4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__vector_3+0x4a>
 4c8:	2f ef       	ldi	r18, 0xFF	; 255
 4ca:	89 ef       	ldi	r24, 0xF9	; 249
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <__vector_3+0x1a>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <__vector_3+0x24>
 4d8:	00 00       	nop
		_delay_ms(20);  //antirrebote
	
		dato_a_enviarI2C = 1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <dato_a_enviarI2C+0x1>
 4e2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <dato_a_enviarI2C>
		sistema_activado = 0;
 4e6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		
	
		while ((PINB & (1 << PINB0)) == 0)   //While para evitar mas pulsos
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <__vector_3+0x44>
 4ec:	8f e3       	ldi	r24, 0x3F	; 63
 4ee:	9c e9       	ldi	r25, 0x9C	; 156
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <__vector_3+0x3c>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__vector_3+0x42>
 4f6:	00 00       	nop
 4f8:	18 9b       	sbis	0x03, 0	; 3
 4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <__vector_3+0x38>
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <__vector_3+0x56>
		}
	}
	
	
	else{
		dato_a_enviarI2C = 0;
 4fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <dato_a_enviarI2C+0x1>
 502:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dato_a_enviarI2C>
		sistema_activado = 0;
 506:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <channel>:
uint16_t topVal = 1;
uint16_t i, j;


void channel(uint8_t setChannel, uint8_t inverted){
	switch(setChannel){
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	19 f0       	breq	.+6      	; 0x524 <channel+0xa>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	79 f0       	breq	.+30     	; 0x540 <channel+0x26>
 522:	08 95       	ret
		case 1:
		if(inverted == 1){
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	31 f4       	brne	.+12     	; 0x534 <channel+0x1a>
			TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//A invertido
 528:	e0 e8       	ldi	r30, 0x80	; 128
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	80 6c       	ori	r24, 0xC0	; 192
 530:	80 83       	st	Z, r24
 532:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1A1);					//A no invertido
 534:	e0 e8       	ldi	r30, 0x80	; 128
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	80 68       	ori	r24, 0x80	; 128
 53c:	80 83       	st	Z, r24
 53e:	08 95       	ret
		}
		break;
		
		case 2:
		if(inverted == 1){
 540:	61 30       	cpi	r22, 0x01	; 1
 542:	31 f4       	brne	.+12     	; 0x550 <channel+0x36>
			TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//B invertido
 544:	e0 e8       	ldi	r30, 0x80	; 128
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	80 63       	ori	r24, 0x30	; 48
 54c:	80 83       	st	Z, r24
 54e:	08 95       	ret
			}else{
			TCCR1A |= (1 << COM1B1);					//B no invertido
 550:	e0 e8       	ldi	r30, 0x80	; 128
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	80 62       	ori	r24, 0x20	; 32
 558:	80 83       	st	Z, r24
 55a:	08 95       	ret

0000055c <initFastPWM1>:
}


void initFastPWM1(uint16_t prescaler){
	//initialize register timer1
	TCCR1A = 0;
 55c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 560:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 564:	88 30       	cpi	r24, 0x08	; 8
 566:	91 05       	cpc	r25, r1
 568:	21 f0       	breq	.+8      	; 0x572 <initFastPWM1+0x16>
 56a:	81 15       	cp	r24, r1
 56c:	94 40       	sbci	r25, 0x04	; 4
 56e:	39 f0       	breq	.+14     	; 0x57e <initFastPWM1+0x22>
 570:	0b c0       	rjmp	.+22     	; 0x588 <initFastPWM1+0x2c>
	{
		case 8:
		TCCR1B |= (1 << CS11);					//prescaler 8
 572:	e1 e8       	ldi	r30, 0x81	; 129
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	80 83       	st	Z, r24
		break;
 57c:	05 c0       	rjmp	.+10     	; 0x588 <initFastPWM1+0x2c>
		
		case 1024:
		TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 57e:	e1 e8       	ldi	r30, 0x81	; 129
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	85 60       	ori	r24, 0x05	; 5
 586:	80 83       	st	Z, r24
		break;
	}
	
	
	TCCR1A |= (1 << WGM11);
 588:	e0 e8       	ldi	r30, 0x80	; 128
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 592:	e1 e8       	ldi	r30, 0x81	; 129
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	88 61       	ori	r24, 0x18	; 24
 59a:	80 83       	st	Z, r24
	topVal = 1;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <topVal+0x1>
 5a4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <topVal>
 5a8:	08 95       	ret

000005aa <topValue>:
	
}


void topValue(uint16_t top){
	if (topVal == 1)	{
 5aa:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <topVal>
 5ae:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <topVal+0x1>
 5b2:	21 30       	cpi	r18, 0x01	; 1
 5b4:	31 05       	cpc	r19, r1
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <topValue+0x18>
		ICR1 = top;		//Poner el valor maximo de llegada en ICR1
 5b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 5bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 5c0:	08 95       	ret
	}
	else{
		topVal = 0;
 5c2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <topVal+0x1>
 5c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <topVal>
 5ca:	08 95       	ret

000005cc <convertServo>:
}


void convertServo(uint16_t analogIn, uint8_t selChannel){   //Conversion para servos
	
	switch(selChannel){
 5cc:	61 30       	cpi	r22, 0x01	; 1
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <convertServo+0xa>
 5d0:	62 30       	cpi	r22, 0x02	; 2
 5d2:	b1 f0       	breq	.+44     	; 0x600 <convertServo+0x34>
 5d4:	08 95       	ret
		case 1:
		i = analogIn;
 5d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <i+0x1>
 5da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i>
		j = (200/12)*i+1000;
 5de:	82 95       	swap	r24
 5e0:	92 95       	swap	r25
 5e2:	90 7f       	andi	r25, 0xF0	; 240
 5e4:	98 27       	eor	r25, r24
 5e6:	80 7f       	andi	r24, 0xF0	; 240
 5e8:	98 27       	eor	r25, r24
 5ea:	88 51       	subi	r24, 0x18	; 24
 5ec:	9c 4f       	sbci	r25, 0xFC	; 252
 5ee:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j+0x1>
 5f2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j>
		OCR1A = j;
 5f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 5fe:	08 95       	ret
		
		case 2:
		i = analogIn;
 600:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <i+0x1>
 604:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i>
		j = (200/12)*i+1000;
 608:	82 95       	swap	r24
 60a:	92 95       	swap	r25
 60c:	90 7f       	andi	r25, 0xF0	; 240
 60e:	98 27       	eor	r25, r24
 610:	80 7f       	andi	r24, 0xF0	; 240
 612:	98 27       	eor	r25, r24
 614:	88 51       	subi	r24, 0x18	; 24
 616:	9c 4f       	sbci	r25, 0xFC	; 252
 618:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <j+0x1>
 61c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <j>
		OCR1B = j;
 620:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 624:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 628:	08 95       	ret

0000062a <initFastPWM2>:

int P, a;
uint8_t suma = 0;

void initFastPWM2(){
	TCCR2A = 0;
 62a:	e0 eb       	ldi	r30, 0xB0	; 176
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	10 82       	st	Z, r1
	TCCR2B = 0;
 630:	a1 eb       	ldi	r26, 0xB1	; 177
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	1c 92       	st	X, r1
	
	TCCR2A |= (1<<COM2A1);	//  OC2A NO INVERTIDO
 636:	80 81       	ld	r24, Z
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);	//  OC2A NO INVERTIDO
 63c:	80 81       	ld	r24, Z
 63e:	80 62       	ori	r24, 0x20	; 32
 640:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<WGM22);	//Fast mode
 642:	80 81       	ld	r24, Z
 644:	8b 60       	ori	r24, 0x0B	; 11
 646:	80 83       	st	Z, r24
	TCCR2B &= ~(1<<WGM22);
 648:	8c 91       	ld	r24, X
 64a:	87 7f       	andi	r24, 0xF7	; 247
 64c:	8c 93       	st	X, r24
	
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);//Prescaler 1024
 64e:	8c 91       	ld	r24, X
 650:	87 60       	ori	r24, 0x07	; 7
 652:	8c 93       	st	X, r24
	OCR2A = 7;
 654:	87 e0       	ldi	r24, 0x07	; 7
 656:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR0B = 0;
 65a:	18 bc       	out	0x28, r1	; 40
 65c:	08 95       	ret

0000065e <convertServo2>:
}


void convertServo2(uint16_t analogIn2, uint8_t selChannel2){   //Conversion para servos
	
	switch(selChannel2){
 65e:	61 30       	cpi	r22, 0x01	; 1
 660:	19 f0       	breq	.+6      	; 0x668 <convertServo2+0xa>
 662:	62 30       	cpi	r22, 0x02	; 2
 664:	c9 f0       	breq	.+50     	; 0x698 <convertServo2+0x3a>
 666:	08 95       	ret
		case 1:
		P = analogIn2;
 668:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <P+0x1>
 66c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <P>
		
		a = (((P)*(28-7))/(255))+7;     //Recreando la funcion de arduino de map(ADCH,0,255,7,38)
 670:	45 e1       	ldi	r20, 0x15	; 21
 672:	48 9f       	mul	r20, r24
 674:	90 01       	movw	r18, r0
 676:	49 9f       	mul	r20, r25
 678:	30 0d       	add	r19, r0
 67a:	11 24       	eor	r1, r1
 67c:	c9 01       	movw	r24, r18
 67e:	6f ef       	ldi	r22, 0xFF	; 255
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
 686:	69 5f       	subi	r22, 0xF9	; 249
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <a+0x1>
 68e:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <a>
		OCR2A = a;
 692:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		
		break;
 696:	08 95       	ret
		
		case 2:
		P = analogIn2;
 698:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <P+0x1>
 69c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <P>
		a = (((P)*(38-7))/(255))+7;
 6a0:	4f e1       	ldi	r20, 0x1F	; 31
 6a2:	48 9f       	mul	r20, r24
 6a4:	90 01       	movw	r18, r0
 6a6:	49 9f       	mul	r20, r25
 6a8:	30 0d       	add	r19, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	c9 01       	movw	r24, r18
 6ae:	6f ef       	ldi	r22, 0xFF	; 255
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__divmodhi4>
 6b6:	69 5f       	subi	r22, 0xF9	; 249
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <a+0x1>
 6be:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <a>
		OCR2B = a;
 6c2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 6c6:	08 95       	ret

000006c8 <initUART9600>:

//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	UDR0 = Caracter;
 6c8:	8a b1       	in	r24, 0x0a	; 10
 6ca:	8e 7f       	andi	r24, 0xFE	; 254
 6cc:	8a b9       	out	0x0a, r24	; 10
 6ce:	8a b1       	in	r24, 0x0a	; 10
 6d0:	82 60       	ori	r24, 0x02	; 2
 6d2:	8a b9       	out	0x0a, r24	; 10
 6d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6d8:	e1 ec       	ldi	r30, 0xC1	; 193
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	10 82       	st	Z, r1
 6de:	80 81       	ld	r24, Z
 6e0:	88 69       	ori	r24, 0x98	; 152
 6e2:	80 83       	st	Z, r24
 6e4:	e2 ec       	ldi	r30, 0xC2	; 194
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	10 82       	st	Z, r1
 6ea:	80 81       	ld	r24, Z
 6ec:	86 60       	ori	r24, 0x06	; 6
 6ee:	80 83       	st	Z, r24
 6f0:	87 e6       	ldi	r24, 0x67	; 103
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 6fc:	08 95       	ret

000006fe <writeTextUART>:
 6fe:	ac 01       	movw	r20, r24
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	07 c0       	rjmp	.+14     	; 0x712 <writeTextUART+0x14>
 704:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 708:	95 ff       	sbrs	r25, 5
 70a:	fc cf       	rjmp	.-8      	; 0x704 <writeTextUART+0x6>
 70c:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 710:	2f 5f       	subi	r18, 0xFF	; 255
 712:	fa 01       	movw	r30, r20
 714:	e2 0f       	add	r30, r18
 716:	f1 1d       	adc	r31, r1
 718:	30 81       	ld	r19, Z
 71a:	31 11       	cpse	r19, r1
 71c:	f3 cf       	rjmp	.-26     	; 0x704 <writeTextUART+0x6>
 71e:	08 95       	ret

00000720 <UART_PrintNum>:
	
}

void UART_PrintNum(uint16_t num) {
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	00 d0       	rcall	.+0      	; 0x726 <UART_PrintNum+0x6>
 726:	00 d0       	rcall	.+0      	; 0x728 <UART_PrintNum+0x8>
 728:	00 d0       	rcall	.+0      	; 0x72a <UART_PrintNum+0xa>
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
	char buffer[6];
	itoa(num, buffer, 10);
 72e:	4a e0       	ldi	r20, 0x0A	; 10
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	be 01       	movw	r22, r28
 734:	6f 5f       	subi	r22, 0xFF	; 255
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	0e 94 13 04 	call	0x826	; 0x826 <itoa>
	writeTextUART(buffer);
 73c:	ce 01       	movw	r24, r28
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	0e 94 7f 03 	call	0x6fe	; 0x6fe <writeTextUART>
}
 744:	26 96       	adiw	r28, 0x06	; 6
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

00000756 <initUltrasonic>:
#include "Ultrasonico.h"

void initUltrasonic() {
	DDRD |= (1<<PIND6);  // TRIG como salida
 756:	8a b1       	in	r24, 0x0a	; 10
 758:	80 64       	ori	r24, 0x40	; 64
 75a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PIND7); // ECHO como entrada
 75c:	8a b1       	in	r24, 0x0a	; 10
 75e:	8f 77       	andi	r24, 0x7F	; 127
 760:	8a b9       	out	0x0a, r24	; 10
 762:	08 95       	ret

00000764 <measureDistance>:



uint16_t measureDistance() {
	// Enviar un pulso de 10us en TRIG
	PORTD &= ~(1<<PIND6);
 764:	8b b1       	in	r24, 0x0b	; 11
 766:	8f 7b       	andi	r24, 0xBF	; 191
 768:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	8a 95       	dec	r24
 76e:	f1 f7       	brne	.-4      	; 0x76c <measureDistance+0x8>
 770:	00 c0       	rjmp	.+0      	; 0x772 <measureDistance+0xe>
	_delay_us(2);
	PORTD |= (1<<PIND6);
 772:	8b b1       	in	r24, 0x0b	; 11
 774:	80 64       	ori	r24, 0x40	; 64
 776:	8b b9       	out	0x0b, r24	; 11
 778:	85 e3       	ldi	r24, 0x35	; 53
 77a:	8a 95       	dec	r24
 77c:	f1 f7       	brne	.-4      	; 0x77a <measureDistance+0x16>
 77e:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<<PIND6);
 780:	8b b1       	in	r24, 0x0b	; 11
 782:	8f 7b       	andi	r24, 0xBF	; 191
 784:	8b b9       	out	0x0b, r24	; 11
	
	// Esperar por el pulso en ECHO
	while (!(PIND & (1<<PIND7)));
 786:	4f 9b       	sbis	0x09, 7	; 9
 788:	fe cf       	rjmp	.-4      	; 0x786 <measureDistance+0x22>
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	06 c0       	rjmp	.+12     	; 0x79c <measureDistance+0x38>
	
	// Medir el ancho del pulso
	uint16_t count = 0;
	while (PIND & (1<<PIND7)) {
		count++;
 790:	2f 5f       	subi	r18, 0xFF	; 255
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	8a 95       	dec	r24
 798:	f1 f7       	brne	.-4      	; 0x796 <measureDistance+0x32>
 79a:	00 00       	nop
	// Esperar por el pulso en ECHO
	while (!(PIND & (1<<PIND7)));
	
	// Medir el ancho del pulso
	uint16_t count = 0;
	while (PIND & (1<<PIND7)) {
 79c:	4f 99       	sbic	0x09, 7	; 9
 79e:	f8 cf       	rjmp	.-16     	; 0x790 <measureDistance+0x2c>
		count++;
		_delay_us(1);
	}
	
	// Convertir el tiempo a distancia
	return (count / 58)+1;  // La constante 58 depende de la velocidad del sonido
 7a0:	af e9       	ldi	r26, 0x9F	; 159
 7a2:	b6 e4       	ldi	r27, 0x46	; 70
 7a4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__umulhisi3>
 7a8:	92 95       	swap	r25
 7aa:	82 95       	swap	r24
 7ac:	8f 70       	andi	r24, 0x0F	; 15
 7ae:	89 27       	eor	r24, r25
 7b0:	9f 70       	andi	r25, 0x0F	; 15
 7b2:	89 27       	eor	r24, r25
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	08 95       	ret

000007b8 <__divmodhi4>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	07 2e       	mov	r0, r23
 7bc:	16 f4       	brtc	.+4      	; 0x7c2 <__divmodhi4+0xa>
 7be:	00 94       	com	r0
 7c0:	07 d0       	rcall	.+14     	; 0x7d0 <__divmodhi4_neg1>
 7c2:	77 fd       	sbrc	r23, 7
 7c4:	09 d0       	rcall	.+18     	; 0x7d8 <__divmodhi4_neg2>
 7c6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__udivmodhi4>
 7ca:	07 fc       	sbrc	r0, 7
 7cc:	05 d0       	rcall	.+10     	; 0x7d8 <__divmodhi4_neg2>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__divmodhi4_exit>

000007d0 <__divmodhi4_neg1>:
 7d0:	90 95       	com	r25
 7d2:	81 95       	neg	r24
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__divmodhi4_neg2>:
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255

000007de <__divmodhi4_exit>:
 7de:	08 95       	ret

000007e0 <__umulhisi3>:
 7e0:	a2 9f       	mul	r26, r18
 7e2:	b0 01       	movw	r22, r0
 7e4:	b3 9f       	mul	r27, r19
 7e6:	c0 01       	movw	r24, r0
 7e8:	a3 9f       	mul	r26, r19
 7ea:	70 0d       	add	r23, r0
 7ec:	81 1d       	adc	r24, r1
 7ee:	11 24       	eor	r1, r1
 7f0:	91 1d       	adc	r25, r1
 7f2:	b2 9f       	mul	r27, r18
 7f4:	70 0d       	add	r23, r0
 7f6:	81 1d       	adc	r24, r1
 7f8:	11 24       	eor	r1, r1
 7fa:	91 1d       	adc	r25, r1
 7fc:	08 95       	ret

000007fe <__udivmodhi4>:
 7fe:	aa 1b       	sub	r26, r26
 800:	bb 1b       	sub	r27, r27
 802:	51 e1       	ldi	r21, 0x11	; 17
 804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
 806:	aa 1f       	adc	r26, r26
 808:	bb 1f       	adc	r27, r27
 80a:	a6 17       	cp	r26, r22
 80c:	b7 07       	cpc	r27, r23
 80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
 810:	a6 1b       	sub	r26, r22
 812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	5a 95       	dec	r21
 81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	bc 01       	movw	r22, r24
 822:	cd 01       	movw	r24, r26
 824:	08 95       	ret

00000826 <itoa>:
 826:	45 32       	cpi	r20, 0x25	; 37
 828:	51 05       	cpc	r21, r1
 82a:	20 f4       	brcc	.+8      	; 0x834 <itoa+0xe>
 82c:	42 30       	cpi	r20, 0x02	; 2
 82e:	10 f0       	brcs	.+4      	; 0x834 <itoa+0xe>
 830:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__itoa_ncheck>
 834:	fb 01       	movw	r30, r22
 836:	10 82       	st	Z, r1
 838:	cb 01       	movw	r24, r22
 83a:	08 95       	ret

0000083c <__itoa_ncheck>:
 83c:	bb 27       	eor	r27, r27
 83e:	4a 30       	cpi	r20, 0x0A	; 10
 840:	31 f4       	brne	.+12     	; 0x84e <__itoa_ncheck+0x12>
 842:	99 23       	and	r25, r25
 844:	22 f4       	brpl	.+8      	; 0x84e <__itoa_ncheck+0x12>
 846:	bd e2       	ldi	r27, 0x2D	; 45
 848:	90 95       	com	r25
 84a:	81 95       	neg	r24
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	0c 94 2a 04 	jmp	0x854	; 0x854 <__utoa_common>

00000852 <__utoa_ncheck>:
 852:	bb 27       	eor	r27, r27

00000854 <__utoa_common>:
 854:	fb 01       	movw	r30, r22
 856:	55 27       	eor	r21, r21
 858:	aa 27       	eor	r26, r26
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	aa 1f       	adc	r26, r26
 860:	a4 17       	cp	r26, r20
 862:	10 f0       	brcs	.+4      	; 0x868 <__utoa_common+0x14>
 864:	a4 1b       	sub	r26, r20
 866:	83 95       	inc	r24
 868:	50 51       	subi	r21, 0x10	; 16
 86a:	b9 f7       	brne	.-18     	; 0x85a <__utoa_common+0x6>
 86c:	a0 5d       	subi	r26, 0xD0	; 208
 86e:	aa 33       	cpi	r26, 0x3A	; 58
 870:	08 f0       	brcs	.+2      	; 0x874 <__utoa_common+0x20>
 872:	a9 5d       	subi	r26, 0xD9	; 217
 874:	a1 93       	st	Z+, r26
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	79 f7       	brne	.-34     	; 0x858 <__utoa_common+0x4>
 87a:	b1 11       	cpse	r27, r1
 87c:	b1 93       	st	Z+, r27
 87e:	11 92       	st	Z+, r1
 880:	cb 01       	movw	r24, r22
 882:	0c 94 43 04 	jmp	0x886	; 0x886 <strrev>

00000886 <strrev>:
 886:	dc 01       	movw	r26, r24
 888:	fc 01       	movw	r30, r24
 88a:	67 2f       	mov	r22, r23
 88c:	71 91       	ld	r23, Z+
 88e:	77 23       	and	r23, r23
 890:	e1 f7       	brne	.-8      	; 0x88a <strrev+0x4>
 892:	32 97       	sbiw	r30, 0x02	; 2
 894:	04 c0       	rjmp	.+8      	; 0x89e <strrev+0x18>
 896:	7c 91       	ld	r23, X
 898:	6d 93       	st	X+, r22
 89a:	70 83       	st	Z, r23
 89c:	62 91       	ld	r22, -Z
 89e:	ae 17       	cp	r26, r30
 8a0:	bf 07       	cpc	r27, r31
 8a2:	c8 f3       	brcs	.-14     	; 0x896 <strrev+0x10>
 8a4:	08 95       	ret

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
